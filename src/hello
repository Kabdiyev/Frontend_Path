import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import { useEffect, useState } from 'react';
import { Link, Route, BrowserRouter as Router, Routes, useNavigate, useParams } from 'react-router-dom';
import './App.css';
import logo from './logo.png';

const Authorization = () => (
    <div>
        <h1>Authorization Page</h1>
        <form>
            <input type="email" placeholder="Email" />
            <input type="password" placeholder="Password" />
            <button type="submit">Submit</button>
        </form>
    </div>
);

const Login = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [redirect, setRedirect] = useState(false);
    const navigate = useNavigate();

    const submitHandler = (e) => {
        e.preventDefault();

        const data = new FormData();
        data.append('username', email);
        data.append('password', password);

        axios.post('https://fastapi-production-fffa.up.railway.app/auth/users/tokens', data)
            .then((response) => {
                const { access_token } = response.data;
                localStorage.setItem('access_token', access_token);
                setRedirect(true);
            })
            .catch((error) => {
                setErrorMessage('Unauthorized user');
                console.error(error);
            });
    };

    useEffect(() => {
        if (redirect) {
            navigate('/upload');
        }
    }, [redirect, navigate]);

    return (
        <div>
            <h1>Login Page</h1>
            {errorMessage && <p>{errorMessage}</p>}
            <form onSubmit={submitHandler}>
                <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                />
                <input
                    type="password"
                    placeholder="Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                />
                <button type="submit">Submit</button>
            </form>
        </div>
    );
};

const About = () => (
    <div>
        <h1>About Gallup Test</h1>
        <p>Different text about Gallup test.</p>
    </div>
);

const Upload = () => {
    const [date, setDate] = useState('');
    const [professions, setProfessions] = useState('');
    const [shouldRedirect, setShouldRedirect] = useState(false);
    const [pdfId, setPdfId] = useState('');
    const navigate = useNavigate();

    useEffect(() => {
        if (shouldRedirect && pdfId) {
            navigate(`/upload-pdf/${pdfId}`);
        }
    }, [shouldRedirect, pdfId, navigate]);

    const submitHandler = (e) => {
        e.preventDefault();

        const data = {
            date_of_test: date,
            list_of_professions: professions
        };

        const token = localStorage.getItem('access_token');

        axios.post('https://fastapi-production-fffa.up.railway.app/Gallup/pdf', data, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        })
            .then((res) => {
                console.log(res.data);
                setPdfId(res.data._id);
                setShouldRedirect(true);
            })
            .catch((err) => {
                console.error(err);
            });
    };

    return (
        <div>
            <h1>Upload File Page</h1>
            <form onSubmit={submitHandler}>
                <input
                    type="date"
                    placeholder="Gallup Test Date"
                    value={date}
                    onChange={(e) => setDate(e.target.value)}
                />
                <input
                    type="text"
                    placeholder="List of Professions"
                    value={professions}
                    onChange={(e) => setProfessions(e.target.value)}
                />
                <button type="submit">Upload File</button>
            </form>
        </div>
    );
};

const UploadPDF = () => {
    const { pdfId } = useParams();
    const navigate = useNavigate();
    const [file, setFile] = useState(null);

    const handleFileChange = (e) => {
        setFile(e.target.files[0]);
    };

    const handleUpload = (e) => {
        e.preventDefault();

        const formData = new FormData();
        formData.append('file', file);

        const token = localStorage.getItem('access_token');

        axios.post(`https://fastapi-production-fffa.up.railway.app/Gallup/${pdfId}/pdf`, formData, {
            headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'multipart/form-data'
            }
        })
            .then((response) => {
                console.log(response.data);
                navigate(`/results/${pdfId}`);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    return (
        <div>
            <h1>Upload PDF Page</h1>
            <form onSubmit={handleUpload}>
                <input type="file" accept=".pdf" onChange={handleFileChange} />
                <button type="submit">Upload PDF</button>
            </form>
        </div>
    );
};

const Results = () => {
    const { pdfId } = useParams();
    const [isLoading, setIsLoading] = useState(false);

    const handleBestFittingCareer = () => {
        setIsLoading(true);

        const token = localStorage.getItem('access_token');

        axios.get(`https://fastapi-production-fffa.up.railway.app/Gallup/${pdfId}/pdf_similarity`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        })
            .then((response) => {
                const url = response.data; // Assuming response data is the URL
                window.open(url, '_blank');
                setIsLoading(false);
            })
            .catch((error) => {
                console.error(error);
                setIsLoading(false);
            });
    };

    const handleGallupResultsReport = () => {
        setIsLoading(true);

        const token = localStorage.getItem('access_token');

        axios.get(`https://fastapi-production-fffa.up.railway.app/Gallup/${pdfId}/pdf_comments`, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        })
            .then((response) => {
                const url = response.data; // Assuming response data is the URL
                window.open(url, '_blank');
                setIsLoading(false);
            })
            .catch((error) => {
                console.error(error);
                setIsLoading(false);
            });
    };

    return (
        <div>
            <h1>Results Page</h1>
            <button onClick={handleBestFittingCareer} disabled={isLoading}>
                {isLoading ? 'Loading...' : 'Best fitting career'}
            </button>
            <button onClick={handleGallupResultsReport} disabled={isLoading}>
                {isLoading ? 'Loading...' : 'Gallup results report'}
            </button>
        </div>
    );
};


const Home = () => (
    <div style={{
        textAlign: "center",
        margin: "0 auto",
        maxWidth: "900px",
    }}>
        <h1>Welcome to Gallup Career Development Center</h1>
        <div style={{ margin: "20px auto", maxWidth: "800px" }}>
            <p style={{ textAlign: "justify" }}>
                Welcome to the Gallup Career Development Center, where your professional growth and success are our top priorities. Our center is designed to provide you with the tools, guidance, and support you need to excel in your career journey.
                At the Gallup Career Development Center, we understand that each individual's career path is unique. That's why we offer personalized services tailored to your specific goals and aspirations.
                Whether you are just starting out in your career or looking to make a transition, our team of experienced career counselors and coaches are here to assist you every step of the way!
            </p>
        </div>
        <nav className="Button-group">
            <Link to="/login" className="Button">Login</Link>
        </nav>
    </div>
);

const App = () => {
    return (
        <Router>
            <div className="App">
                <header className="App-header">
                    <div className="Top-bar">
                        <Link to="/" className="Logo-container">
                            <h1>Gallup</h1>
                            <img src={logo} className="App-logo" alt="logo" />
                        </Link>
                    </div>
                </header>

                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/signup" element={<Authorization />} />
                    <Route path="/login" element={<Login />} />
                    <Route path="/about" element={<About />} />
                    <Route path="/upload" element={<Upload />} />
                    <Route path="/upload-pdf/:pdfId" element={<UploadPDF />} />
                    <Route path="/results/:pdfId" element={<Results />} />
                </Routes>
            </div>
        </Router>
    );
};

export default App;